{"version":3,"sources":["utils.ts","components/PostDetails/index.ts","components/PostDetails/PostDetails.tsx","components/Post/index.ts","components/Post/Post.tsx","components/Main/index.ts","components/Main/Main.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["redditRequest","a","subreddit","page","fetch","catch","err","console","log","response","data","json","PostDetails","date","post","showDetails","position","h","w","objectFit","overflow","direction","bgColor","p","justifyContent","label","fontSize","color","author","score","created","Intl","DateTimeFormat","weekday","day","month","year","hour","minute","hour12","format","parseInt","align","overflowY","href","id","isExternal","icon","Link","aria-label","title","Post","handleSelect","selected","thumbnail","useState","setShowDetails","className","borderWidth","borderRadius","m","onClick","onMouseEnter","onMouseLeave","style","border","src","alt","fallbackSrc","Main","useParams","history","useHistory","posts","setPosts","next","setNext","prev","setPrev","setPage","loading","setLoading","setSelected","useEffect","after","postKeys","children","reduce","result","c","postObj","over_18","key","push","getPosts","newSelected","justify","alignItems","width","height","to","Star","placeholder","variant","isFullWidth","onKeyDown","e","target","value","handleSearch","includes","indexOf","length","ArrowLeft","ArrowRight","templateColumns","map","as","px","unselected","Object","keys","Delete","s","display","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fcd0fefd.chunk.js","sourcesContent":["export default async function redditRequest(subreddit = 'pics', page = '') {\r\n  const response = await fetch(\r\n    `https://www.reddit.com/r/${subreddit}.json?after=${page}`\r\n  ).catch((err)=>console.log(err));\r\n\r\n  if (!response){\r\n    return {data:null}\r\n  }\r\n  return await response.json();\r\n}\r\n","import PostDetails from './PostDetails';\r\nexport default PostDetails;","import { LinkIcon } from '@chakra-ui/icons';\r\nimport {\r\n  Box,\r\n  Flex,\r\n  Heading,\r\n  IconButton,\r\n  Link,\r\n  Text,\r\n  Tooltip,\r\n} from '@chakra-ui/react';\r\nimport React from 'react';\r\nimport { TrimPostType } from '../../interfaces';\r\nimport './postdetails.css';\r\n\r\ninterface Props {\r\n  post: TrimPostType;\r\n  showDetails: boolean;\r\n}\r\n\r\nexport default function PostDetails({ post, showDetails }: Props) {\r\n  const convertDate = (date: string) => {\r\n    return new Intl.DateTimeFormat('en', {\r\n      weekday: 'short',\r\n      day: 'numeric',\r\n      month: 'numeric',\r\n      year: 'numeric',\r\n      hour: 'numeric',\r\n      minute: 'numeric',\r\n      hour12: true,\r\n    }).format(parseInt(date) * 1000);\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      position=\"absolute\"\r\n      h=\"100%\"\r\n      w=\"100%\"\r\n      objectFit=\"contain\"\r\n      overflow=\"hidden\"\r\n    >\r\n      {showDetails && (\r\n        <Flex direction=\"column\" bgColor=\"#00000070\" p={3}>\r\n          <Flex justifyContent=\"space-around\">\r\n            <Tooltip label=\"Author\">\r\n              <Text fontSize=\"md\" color=\"#FFFFFF\">\r\n                âœ’{post.author}\r\n              </Text>\r\n            </Tooltip>\r\n            <Tooltip label=\"Score\">\r\n              <Text fontSize=\"md\" color=\"#FFFFFF\">\r\n                ðŸ§¡{post.score}\r\n              </Text>\r\n            </Tooltip>\r\n            <Tooltip label=\"Date Created\">\r\n              <Text fontSize=\"md\" color=\"#FFFFFF\">\r\n                ðŸ“…{convertDate(post.created)}\r\n              </Text>\r\n            </Tooltip>\r\n          </Flex>\r\n          <Flex align=\"center\" h=\"100px\" overflowY=\"auto\">\r\n            <Box>\r\n              <Tooltip label=\"Open Post\">\r\n                <Link href={`https://redd.it/${post.id}`} isExternal>\r\n                  <IconButton icon={<LinkIcon />} aria-label=\"Reddit\" />\r\n                </Link>\r\n              </Tooltip>\r\n            </Box>\r\n            <Box overflowY=\"auto\">\r\n              <Heading fontSize=\"xl\" color=\"#FFFFFF\" p=\"2\">\r\n                {post.title}\r\n              </Heading>\r\n            </Box>\r\n          </Flex>\r\n        </Flex>\r\n      )}\r\n    </Box>\r\n  );\r\n}\r\n","import Post from './Post';\r\nexport default Post;\r\n","import { Box, Image } from '@chakra-ui/react';\r\nimport React, { useState } from 'react';\r\nimport { SelectedType, TrimPostType } from '../../interfaces';\r\nimport PostDetails from '../PostDetails';\r\nimport './post.css';\r\n\r\ninterface Props {\r\n  handleSelect: any;\r\n  post: TrimPostType;\r\n  selected: SelectedType;\r\n  h?: string;\r\n  w?: string;\r\n  thumbnail?: boolean;\r\n}\r\n\r\nexport default function Post({\r\n  handleSelect,\r\n  post,\r\n  selected,\r\n  h = '200px',\r\n  w = 'auto',\r\n  thumbnail = false,\r\n}: Props) {\r\n  const [showDetails, setShowDetails] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        className=\"post\"\r\n        borderWidth=\"1px\"\r\n        borderRadius=\"lg\"\r\n        overflow=\"hidden\"\r\n        h={h}\r\n        w={w}\r\n        m=\"6\"\r\n        objectFit=\"cover\"\r\n        onClick={() => handleSelect(post)}\r\n        onMouseEnter={() => setShowDetails(true)}\r\n        onMouseLeave={() => setShowDetails(false)}\r\n        style={{\r\n          border: `${\r\n            selected[post.id] ? '5px solid white' : '5px solid black'\r\n          }`,\r\n        }}\r\n        position=\"relative\"\r\n      >\r\n        {thumbnail || <PostDetails post={post} showDetails={showDetails} />}\r\n        <Image\r\n          src={post.thumbnail}\r\n          alt={post.title}\r\n          w=\"100%\"\r\n          h=\"100%\"\r\n          objectFit=\"cover\"\r\n          fallbackSrc=\"./reddit.png\"\r\n        />\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n","import Main from './Main';\r\nexport default Main;\r\n","import {\r\n  ArrowLeftIcon,\r\n  ArrowRightIcon,\r\n  DeleteIcon,\r\n  StarIcon,\r\n} from '@chakra-ui/icons';\r\nimport {\r\n  Flex,\r\n  Grid,\r\n  GridItem,\r\n  Heading,\r\n  IconButton,\r\n  Input,\r\n  List,\r\n  ListItem,\r\n  Spinner,\r\n  Tooltip,\r\n} from '@chakra-ui/react';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport {\r\n  PostType,\r\n  RouteParams,\r\n  SelectedType,\r\n  TrimPostType,\r\n} from '../../interfaces';\r\nimport redditRequest from '../../utils';\r\nimport Post from '../Post';\r\nimport './main.css';\r\n\r\nexport default function Main() {\r\n  let { subreddit } = useParams<RouteParams>();\r\n  const history = useHistory();\r\n\r\n  const [posts, setPosts] = useState<TrimPostType[]>([]);\r\n  const [next, setNext] = useState('');\r\n  const [prev, setPrev] = useState<string[]>([]);\r\n  const [page, setPage] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n  const [selected, setSelected] = useState<SelectedType>({});\r\n\r\n  useEffect(() => {\r\n    // on mount, get the Posts from the subreddit\r\n    const getPosts = async () => {\r\n      const { data: response } = await redditRequest(subreddit, page);\r\n\r\n      // if no response/error, push back to main\r\n      if (!response) {\r\n        history.push('/');\r\n      } else {\r\n        // prep the next page for pagination\r\n        setNext(response.after);\r\n\r\n        // identify keys in the data that we want to filter by\r\n        const postKeys = [\r\n          'id',\r\n          'author',\r\n          'name',\r\n          'title',\r\n          'score',\r\n          'created',\r\n          'thumbnail',\r\n        ];\r\n\r\n        // reduce to clean/trim the data\r\n        const posts = response.children.reduce(\r\n          (result: TrimPostType[], c: PostType) => {\r\n            const postObj: { [key: string]: string } = {};\r\n            // remove any nsfw content\r\n            if (c.data.over_18 !== 'image') {\r\n              // parse out unused data by singling out only key-value pairs that match the postKeys array\r\n              for (const key of postKeys) {\r\n                postObj[key] = c.data[key];\r\n              }\r\n              result.push(postObj);\r\n            }\r\n            return result;\r\n          },\r\n          []\r\n        );\r\n\r\n        setPosts(posts);\r\n        setLoading(false);\r\n      }\r\n    };\r\n    // call the function\r\n    getPosts();\r\n  }, [subreddit, page, history]);\r\n\r\n  // renders the main grid of posts\r\n  const renderThis = () => {\r\n    return posts.map((p: TrimPostType) => (\r\n      <GridItem key={`post-${p.id}`}>\r\n        <Post handleSelect={handleSelect} post={p} selected={selected} />\r\n      </GridItem>\r\n    ));\r\n  };\r\n\r\n  // renders the list of selected posts\r\n  const renderThat = () => {\r\n    return Object.keys(selected).map((s: string) => (\r\n      <ListItem display=\"inline-block\" key={`selected-${s}`}>\r\n        <Post\r\n          handleSelect={handleSelect}\r\n          post={selected[s]}\r\n          selected={selected}\r\n          h=\"70px\"\r\n          w=\"70px\"\r\n          thumbnail={true}\r\n        />\r\n      </ListItem>\r\n    ));\r\n  };\r\n\r\n  // on 'enter', the search input field will push the value as params to the url\r\n  // which will trigger a re-render using the new params\r\n  // default params are set to the 'pics' subreddit\r\n  const handleSearch = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    let target = e.target as HTMLInputElement;\r\n    if (e.key === 'Enter') {\r\n      history.push(`/${target.value}`);\r\n    }\r\n  };\r\n\r\n  const handleRemove = () => {\r\n    const unselected = posts.reduce(\r\n      (result: TrimPostType[], post: TrimPostType) => {\r\n        if (!Object.keys(selected).includes(post.id)) {\r\n          result.push(post);\r\n        }\r\n\r\n        return result;\r\n      },\r\n      []\r\n    );\r\n\r\n    setPosts(unselected);\r\n    setSelected({});\r\n  };\r\n\r\n  // Handles the selection of a post\r\n  // The selected object is a hashmap of all selected posts\r\n  // that are identified by their post-id as the key\r\n  // handleSelect checks the selected object for the key to see if its already selected\r\n  const handleSelect = (post: TrimPostType) => {\r\n    if (selected[post.id]) {\r\n      // if the clicked post is in the selected obj, delete it\r\n      const newSelected = { ...selected };\r\n      delete newSelected[post.id];\r\n      setSelected(newSelected);\r\n    } else {\r\n      // otherwise, add the post obj\r\n      setSelected({ ...selected, [post.id]: post });\r\n    }\r\n  };\r\n\r\n  // Pagination\r\n  const handleNext = () => {\r\n    setPrev([...prev, page]);\r\n    setPage(next);\r\n  };\r\n\r\n  const handlePrev = () => {\r\n    if (prev.includes(page)) {\r\n      setPage(prev[prev.indexOf(page) - 1]);\r\n    } else {\r\n      setPage(prev[prev.length - 1]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Flex\r\n      className=\"main scrollbar\"\r\n      direction=\"row\"\r\n      justify=\"center\"\r\n      alignItems=\"flex-start\"\r\n      width=\"100%\"\r\n      height=\"100%\"\r\n    >\r\n      <Flex\r\n        className=\"main\"\r\n        width=\"85%\"\r\n        height=\"100%\"\r\n        direction=\"column\"\r\n        justify=\"center\"\r\n        align=\"center\"\r\n        bgColor=\"black\"\r\n      >\r\n        <Flex justify=\"space-around\" w=\"80%\">\r\n          <Tooltip label=\"Home\">\r\n            <Link to=\"/\">\r\n              <IconButton icon={<StarIcon />} aria-label=\"Home\" />\r\n            </Link>\r\n          </Tooltip>\r\n          <Input\r\n            color=\"white\"\r\n            placeholder=\"Subreddit Name Goes Here\"\r\n            variant=\"filled\"\r\n            isFullWidth\r\n            onKeyDown={(e) => {\r\n              handleSearch(e);\r\n            }}\r\n          />\r\n          <Tooltip label=\"Previous\">\r\n            <IconButton\r\n              onClick={handlePrev}\r\n              icon={<ArrowLeftIcon />}\r\n              aria-label=\"Previous\"\r\n              // isDisabled={prev? true: false}\r\n            />\r\n          </Tooltip>\r\n          <Tooltip label=\"Next\">\r\n            <IconButton\r\n              onClick={handleNext}\r\n              icon={<ArrowRightIcon />}\r\n              aria-label=\"Next\"\r\n            />\r\n          </Tooltip>\r\n        </Flex>\r\n\r\n        <Grid h=\"90%\" w=\"100%\" templateColumns=\"repeat(3, 1fr)\" overflow=\"auto\">\r\n          {loading ? <Spinner /> : renderThis()}\r\n        </Grid>\r\n      </Flex>\r\n\r\n      <Flex\r\n        direction=\"column\"\r\n        justify=\"flex-start\"\r\n        align=\"center\"\r\n        width=\"30%\"\r\n        h=\"100%\"\r\n      >\r\n        <Flex m={6}>\r\n          <Heading as=\"h2\" color=\"white\" px={6}>\r\n            Selected\r\n          </Heading>\r\n          <Tooltip label=\"Clear\">\r\n            <IconButton\r\n              onClick={handleRemove}\r\n              icon={<DeleteIcon />}\r\n              aria-label=\"Delete\"\r\n            />\r\n          </Tooltip>\r\n        </Flex>\r\n        <Flex align=\"start\" justify=\"center\" overflow=\"auto\">\r\n          <List>{renderThat()}</List>\r\n        </Flex>\r\n      </Flex>\r\n    </Flex>\r\n  );\r\n}\r\n","import { Flex } from '@chakra-ui/react';\r\nimport React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport './App.css';\r\nimport Main from './components/Main';\r\n\r\n// TODO: pass in params as route\r\nexport default function App() {\r\n  return (\r\n    <Flex\r\n      className=\"app\"\r\n      bgColor=\"#292929\"\r\n      h=\"100vh\"\r\n      w=\"100vw\"\r\n      justify=\"center\"\r\n      alignItems=\"center\"\r\n    >\r\n      <Switch>\r\n        <Route path=\"/:subreddit\">\r\n          <Main />\r\n        </Route>\r\n        <Route path=\"/\">\r\n          <Main />\r\n        </Route>\r\n      </Switch>\r\n    </Flex>\r\n  );\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { HashRouter as Router } from 'react-router-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { ChakraProvider } from '@chakra-ui/react';\r\n\r\n// Check '/components/Main' for dev comments\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router>\r\n      <ChakraProvider>\r\n        <App />\r\n      </ChakraProvider>\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}